pragma solidity >=0.4.10;

contract insurance{
    
    uint public max_coins = 10000000;
    
    uint public total_bought_coins = 0;
    
    uint public rs_to_coins = 1;
    
    mapping (address => uint) equity_coins;
    
    mapping (address => uint) insurance_period;
    
    mapping (address => bool) approval_of_buy_request;
    
    mapping (address => bool) requested_to_buy_insurance;
    
    mapping (address => bool) requested_for_claim;
    
    mapping (address => bool) claim_approved;
        
    mapping (address => uint) amount_recieved;
    
    function equity_in_coins(address insuree) external view returns (uint temp){
        temp =  equity_coins[insuree];
        return temp;
    }
    
    function request_to_buy_insurance(address insuree) external payable returns(bool) {
        if(requested_to_buy_insurance[insuree] == false){
            requested_to_buy_insurance[insuree] = true;
            return true;
        } 
        else return false;
    }
    
    function is_insurance_buyable(address insuree) external view returns(bool){
        return approval_of_buy_request[insuree];
    }
    
    function approval_of_insurance(address insuree) external{
        if(requested_to_buy_insurance[insuree] == true) approval_of_buy_request[insuree] = true;
    }
    
    modifier approved(address insuree, uint rs_invested){
        require (requested_to_buy_insurance[insuree] && approval_of_buy_request[insuree] && (rs_invested * rs_to_coins + total_bought_coins <= max_coins));
        _;
    }
    
    function buy_insurance(address insuree, uint rs_invested, uint duration) external payable 
    approved(insuree, rs_invested){
        uint coins_bought = rs_invested * rs_to_coins;
        equity_coins[insuree] = coins_bought;
        total_bought_coins += coins_bought;
        insurance_period[insuree] = duration;
    }
    
    //claiming process
    
    function reqest_for_claim(address insuree) external{
        if(requested_for_claim[insuree] == false) requested_for_claim[insuree] = true;
    }
    
    function approval_of_claim(address insuree, uint duration) external{
        if(requested_for_claim[insuree] == true && duration <= insurance_period[insuree]) claim_approved[insuree] = true;
    }
    
    modifier check_for_claim_approved(address insuree){
        require(requested_for_claim[insuree] == true && claim_approved[insuree] == true);
        _;
    }
    
    function is_claimable(address insuree) public view returns(bool){
        return claim_approved[insuree]; 
    }
    
    function amount_recieve(address insuree) public view returns(uint){
        return amount_recieved[insuree] * 2;
    }
    
    function claim(address insuree) external payable
    check_for_claim_approved(insuree){
        total_bought_coins += equity_coins[insuree];
        equity_coins[insuree] = 0;
    }
    
}



